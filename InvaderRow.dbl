import System
import System.Drawing

.array 0
namespace SpaSynVaders
	
	public class InvaderRow
		
		public Invaders, [#]@Invader
		public LastPosition, Point, new Point(0,0)
		public kBombIntervalSpacing, int, 50
		
		public method InvaderRow
			gif1, @string 
			gif2, @string 
			rowNum, int 
			endparams
			record
				i, int
			endrecord
		proc
			Invaders = new Invader[11]
			for i from ((int)0) thru Invaders.Length - 1
			begin
				Invaders[i] = new Invader(gif1, gif2)
				Invaders[i].Position.X = i * Invaders[i].GetBounds().Width + 5
				Invaders[i].Position.Y = rowNum * Invaders[i].GetBounds().Height + 10
				Invaders[i].SetCounter(i * kBombIntervalSpacing)
			end
			LastPosition = Invaders[Invaders.Length-1].Position
		endmethod
		
		public method ResetBombCounters, void
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
			begin
				Invaders[i].ResetBombPosition()
				Invaders[i].SetCounter(i * kBombIntervalSpacing)
			end
		endmethod
		
		public property indexer, @Invader
			index, int 
			method get
			proc
				mreturn Invaders[index]
			endmethod
		endproperty
				
		public method Draw, void
			g, @Graphics 
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
				Invaders[i].Draw(g)
		endmethod
		
		public method CollisionTest, int
			aRect, Rectangle 
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
			begin
				if ((Invaders[i].GetBounds().IntersectsWith(aRect)) && (!Invaders[i].BeenHit))
					mreturn i
			end
			mreturn -1
		endmethod
		
		public property DirectionRight, boolean
			method set
				record
					i, int
				endrecord
			proc
				for i from 0 thru Invaders.Length - 1
					Invaders[i].DirectionRight = value
			endmethod
		endproperty
		
		public method Move, void
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
				Invaders[i].Move()
			if (Invaders[0].DirectionRight) then
				LastPosition = Invaders[Invaders.Length-1].Position
			else
				LastPosition = Invaders[0].Position
		endmethod
		
		public method MoveInPlace, void
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
				Invaders[i].MoveInPlace()
		endmethod
		
		public method GetFirstInvader, @Invader
			endparams
			record
				count, int, 0
				TheInvader, @Invader
			endrecord
		proc
			TheInvader = Invaders[count]
			while (TheInvader.BeenHit && (count < Invaders.Length - 1)) do
			begin
				count += 1
				TheInvader = Invaders[count]
			end
			mreturn TheInvader
		endmethod
		
		public method GetLastInvader, @Invader
			endparams
			record
				count, int
				TheInvader, @Invader
			endrecord
		proc
			count = Invaders.Length - 1
			TheInvader = Invaders[count]
			while (TheInvader.BeenHit && (count>0)) do
			begin
				count -= 1
				TheInvader = Invaders[count]
			end
			mreturn TheInvader
		endmethod
		
		public method NumberOfLiveInvaders, int
			endparams
			record
				count, int, 0
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
			begin
				if (!Invaders[i].Died)
					count += 1
			end
			mreturn count
		endmethod
		
		public method AlienHasLanded, boolean
			bottom, int 
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
			begin
				if ((Invaders[i].GetBounds().Bottom >= bottom) && !Invaders[i].BeenHit)
					mreturn true
			end
			mreturn false
		endmethod
		
		public method MoveDown, void
			endparams
			record
				i, int
			endrecord
		proc
			for i from 0 thru Invaders.Length - 1
			begin
				Invaders[i].Position.Y = Invaders[i].Position.Y + Invaders[i].GetBounds().Height / 8
				Invaders[i].UpdateBounds()
			end
		endmethod

	endclass

endnamespace

